# Docker image, Azure container registry and Azure kubernetes service
# Build a Docker image, push to an Azure container registry and deploy to Azure kubernetes service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # ========================================================================
  #                          Mandatory variables 
  # ========================================================================

  # Update Azure.ResourceGroupName value with Azure resource group name.
  Azure.ResourceGroupName: 'dsmsgosample'

  # Update Azure.ServiceConnectionId value with AzureRm service endpoint.
  Azure.ServiceConnectionId: 'f9a49e40-df97-4f71-aa27-ba0f2c1bca9f'

  # Update Azure.Location value with Azure Location.
  Azure.Location: 'eastus'

  # Update ACR.Name value with ACR name. Please note ACR names should be all lower-case and alphanumeric only.
  ACR.Name: 'dsmsgosampleb1cb'

  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: 'dsmsgosample'

  # Docker Container port
  Container.Port: 5000

  # ========================================================================
  #                           Optional variables 
  # ========================================================================

  ACR.RepositoryName: '$(ACR.Name)'
  ACR.ImageName: '$(ACR.Name):$(Build.BuildId)'
  ACR.FullName: '$(ACR.Name).azurecr.io'
  ACR.Sku: 'Standard'
  AKS.KubeDeploymentYaml: '$(System.DefaultWorkingDirectory)/KubeDeployment.yml' # Update AKS.KubeDeploymentYaml if you want to use deployment file from repo instead of generated file.
  AKS.DeploymentPort: '$(Container.Port)'
  Azure.CreateResources: 'true' # Update Azure.CreateResources to false if you have already created resources like resource group, azure container registry and azure kubernetes cluster.
  System.Debug: 'false'

jobs:

- job: CreateResources
  displayName: Create resources
  condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))

  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: AzureCLI@1
    displayName: 'Create resources if required'
    inputs:
      connectedServiceNameARM: '$(Azure.ServiceConnectionId)'
      scriptLocation: inlineScript
      addSpnToEnvironment: true
      inlineScript: |
        #!/bin/bash
        RGExists=$(az group exists --name $(Azure.ResourceGroupName))
        echo "RG exists: $RGExists"
        if [ $RGExists = false ]
        then
          CREATED_RG=$(az group create --name $(Azure.ResourceGroupName) --location $(Azure.Location))
          echo "$CREATED_RG"
        fi
        CREATE_ACR=$(az acr check-name -n $(ACR.Name) --query nameAvailable)
        echo "Create ACR: $CREATE_ACR"
        if [ $CREATE_ACR = true ]
        then
          CREATED_ACR=$(az acr create -n $(ACR.Name) -g $(Azure.ResourceGroupName) --sku $(ACR.Sku))
          echo "$CREATED_ACR"
        fi
        CREATE_AKS=$(az resource list --name $(AKS.ClusterName) -g $(Azure.ResourceGroupName) --resource-type Microsoft.ContainerService/managedClusters --query "[0].id")
        if [ -z "${CREATE_AKS}" ]
        then
          echo "Create AKS cluster: true"
          echo "Creating AKS cluster..."
          ssh-keygen -q -b 2048 -t rsa -f ssh_key -N ""
          CREATED_AKS=$(az aks create -g $(Azure.ResourceGroupName) -n $(AKS.ClusterName) --ssh-key-value ./ssh_key.pub --service-principal $servicePrincipalId --client-secret "${servicePrincipalKey}")
          echo $CREATED_AKS
        else
          echo "Create AKS cluster: false"
          if [ -n "${CREATED_ACR}" ]; then
            echo "Authenticating the newly created ACR with the AKS Cluster..."
            CLIENT_ID=$(az aks show --resource-group $(Azure.ResourceGroupName) --name $(AKS.ClusterName) --query "servicePrincipalProfile.clientId" --output tsv)
            ACR_ID=$(az acr show --name $(ACR.Name) --resource-group $(Azure.ResourceGroupName) --query "id" --output tsv)
            az role assignment create --assignee $CLIENT_ID --role Reader --scope $ACR_ID
          fi
        fi
        AKS_ID=$(az aks show --resource-group $(Azure.ResourceGroupName) --name $(AKS.ClusterName) --query "id" -o tsv)
        echo "AKS cluster: [$(AKS.ClusterName)](https://portal.azure.com/#resource${AKS_ID}/overview)" > $(System.DefaultWorkingDirectory)/azureCluster.md
        echo "##vso[task.addattachment type=Distributedtask.Core.Summary;name=AzureResources;]$(System.DefaultWorkingDirectory)/azureCluster.md"

- job: BuildImage
  displayName: Build
  dependsOn: CreateResources
  condition: or(succeeded(), ne(variables['Azure.CreateResources'], 'true'))

  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: Docker@1
    displayName: 'Build an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      command: build
      dockerFile: '**/Dockerfile'

  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      command: push

- job: DeployApp
  displayName: Deploy
  dependsOn: BuildImage
  condition: succeeded()

  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - bash: |
      if [ -f $(AKS.KubeDeploymentYaml) ]; then
        echo "##vso[task.setvariable variable=AKS.KubeDeploymentYamlExists;]true"
      else
        echo "##vso[task.setvariable variable=AKS.KubeDeploymentYamlExists;]false"
      fi
    displayName: 'Check kubernetes deployment yaml exists'

  - bash: |  
       echo "apiVersion : apps/v1beta1
       kind: Deployment
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               app: $(ACR.RepositoryName)
           spec:
             containers:
             - name: $(ACR.RepositoryName)
               image: $(ACR.FullName)/$(ACR.ImageName)
               ports:
               - containerPort: $(AKS.DeploymentPort)
       ---
       apiVersion: v1
       kind: Service
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         type: LoadBalancer
         ports:
         - port: $(AKS.DeploymentPort)
         selector:
           app: $(ACR.RepositoryName)" > $(AKS.KubeDeploymentYaml)
    displayName: 'Generate kubernetes deployment yaml'
    condition: and(succeeded(), eq(variables['AKS.KubeDeploymentYamlExists'], 'False'))

  - task: Kubernetes@1
    displayName: 'kubectl apply'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureResourceGroup: '$(Azure.ResourceGroupName)'
      kubernetesCluster: '$(AKS.ClusterName)'
      arguments: '-f $(AKS.KubeDeploymentYaml)'